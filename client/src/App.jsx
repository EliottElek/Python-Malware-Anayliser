import { useState, useCallback, useEffect } from "react";
import { useDropzone } from "react-dropzone";
import CodeEditorWindow from "./components/Editor";
import toast from "react-hot-toast";
import { themeChange } from "theme-change";
import { themes } from "./utils";
import Logo from "./images/logo.png";
import GithubLogo from "./images/github-mark.svg";
import { useLocalStorage } from "./hooks/useLocalStorage";

function App() {
  const [files, setFiles] = useLocalStorage("FILES", []);
  const [fileIndex, setFileIndex] = useState(0);
  const handleRemove = (index) => {
    setFiles((prevFiles) => {
      const updatedFiles = [...prevFiles];
      updatedFiles.splice(index, 1);
      return updatedFiles;
    });
    // const foundIndex = index - 1 < 0 ? index + 1 : index - 1;
    setFileIndex(0);
  };
  useEffect(() => {
    themeChange(false);
  }, []);
  const handleFileDrop = useCallback(async (acceptedFiles) => {
    acceptedFiles.forEach(async (file) => {
      const reader = new FileReader();
      reader.onabort = () => console.log("file reading was aborted");
      reader.onerror = () => console.log("file reading has failed");
      reader.onload = () => {
        const data = new FormData();
        data.append("file", file);
        data.append("filename", file.name);
        fetch("http://localhost:5000/upload", {
          method: "POST",
          body: data,
        }).then((response) => {
          response.json().then((body) => {
            setFiles((prevFiles) => [
              ...prevFiles,
              {
                name: body.filename,
                extracted_files: body.extracted_files,
                suspicious: body.suspicious,
                content: atob(body.file_content),
                file_analysis: body.file_analysis,
                language: "python",
              },
            ]);
          });
        });
      };

      reader.readAsArrayBuffer(file);
    });
  }, []);

  const { getRootProps, getInputProps, isDragActive } = useDropzone({
    onDrop: handleFileDrop,
    onDropRejected: () =>
      toast.error(
        () => (
          <span>
            Could not import this file.
            <br /> Try again with <b>.pyc</b> or <b>.exe</b> formats.
          </span>
        ),
        {
          duration: 4000,
          position: "top-center",
        }
      ),
    accept: {
      "application/x-msdownload": [".exe"],
      "application/octet-stream": [".pyc"],
    },
  });

  return (
    <div className="h-screen relative">
      <div className="flex justify-between items-center h-16 p-2 px-8 shadow bg-base-100 rounded-none w-full z-20 sticky top-0 overflow-x-auto border-b border-b-base-200">
        <a className="h-full" href="/">
          <img src={Logo} className="h-full" />
        </a>
        <div className="flex flex-grow items-center gap-3 h-full">
          <div className="w-full text-end">
            <select
              data-choose-theme
              className="select select-bordered rounded-full select-sm"
            >
              {themes.map((theme, i) => (
                <option key={i} value={theme}>
                  {theme}
                </option>
              ))}
            </select>
          </div>

          <a
            target="_blank"
            href="https://github.com/EliottElek/Python-Malware-Anayliser"
          >
            <button className="btn rounded-full btn-primary btn-sm">
              Github
            </button>
          </a>
        </div>
      </div>
      <div className="flex h-12 tabs join shadow bg-base-100 rounded-none w-full z-20 sticky top-16 overflow-x-auto">
        {files?.map((file, i) => (
          <a
            className={[
              "tab tab-bordered gap-2 flex items-center justify-between rounded-none h-full tab-lg",
              file.name === files[fileIndex].name && "tab-active",
              file.suspicious ? "text-red-400" : "text-green-400",
            ].join(" ")}
            type="radio"
            name="options"
            aria-label={file.name}
            disabled={file === file.name}
            onClick={() => setFileIndex(i)}
            key={i}
          >
            {file.name}
            <button
              className="btn btn-circle rounded-full bg-transparent btn-sm"
              onClick={(e) => {
                e.stopPropagation();
                handleRemove(i);
              }}
            >
              <svg
                xmlns="http://www.w3.org/2000/svg"
                className="h-4 w-4"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth="2"
                  d="M6 18L18 6M6 6l12 12"
                />
              </svg>
            </button>
          </a>
        ))}
      </div>
      <div className="md:grid-cols-2 md:grid flex flex-col flex-col-reverse">
        <div className="h-[calc(100vh_-_112px)] sticky top-28 bg-base-200">
          {files.length > 0 ? (
            <div className="h-full ">
              <CodeEditorWindow file={files[fileIndex]} />
            </div>
          ) : (
            <div className="h-full flex flex-col items-center text-xl w-full flex items-center justify-center">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                fill="none"
                viewBox="0 0 24 24"
                strokeWidth={1.5}
                stroke="currentColor"
                className="w-8 h-8"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  d="M17.25 6.75L22.5 12l-5.25 5.25m-10.5 0L1.5 12l5.25-5.25m7.5-3l-4.5 16.5"
                />
              </svg>

              <h1>Your decompiled code will show here</h1>
            </div>
          )}
        </div>
        <div className="flex items-center flex-col h-[calc(100vh_-112px)] justify-start p-4 gap-4">
          <div
            className={[
              "w-full cursor-pointer text-center p-20 rounded-xl flex items-center justify-center border-dotted border-2 border-gray-400",
              ,
              isDragActive && "bg-gray-300 bg-opacity-30",
            ].join(" ")}
            {...getRootProps()}
          >
            <input {...getInputProps()} />
            {isDragActive ? (
              <div className="flex items-center flex-col">
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  fill="none"
                  viewBox="0 0 24 24"
                  strokeWidth={1.5}
                  stroke="currentColor"
                  className="w-12 h-12"
                >
                  {" "}
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    d="M12 16.5V9.75m0 0l3 3m-3-3l-3 3M6.75 19.5a4.5 4.5 0 01-1.41-8.775 5.25 5.25 0 0110.233-2.33 3 3 0 013.758 3.848A3.752 3.752 0 0118 19.5H6.75z"
                  />
                </svg>
                <p>Drop...</p>
              </div>
            ) : (
              <div className="flex items-center flex-col">
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  fill="none"
                  viewBox="0 0 24 24"
                  strokeWidth={1.5}
                  stroke="currentColor"
                  className="w-12 h-12"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    d="M12 16.5V9.75m0 0l3 3m-3-3l-3 3M6.75 19.5a4.5 4.5 0 01-1.41-8.775 5.25 5.25 0 0110.233-2.33 3 3 0 013.758 3.848A3.752 3.752 0 0118 19.5H6.75z"
                  />
                </svg>

                <p>
                  Drag & Drop your <b>.pyc</b> or <b>.exe</b> file(s) here or
                  click to open the finder.
                </p>
              </div>
            )}
          </div>

          {files?.length > 0 && (
            <div className="w-full">
              <div className="mockup-code p-3 f-full overflow-hidden flex flex-col">
                {files[fileIndex]?.file_analysis?.length === 0 ? (
                  <>
                    <pre data-prefix="$">
                      <code className="text-green-400 font-bold whitespace-pre-wrap">
                        logs analyser
                      </code>
                    </pre>
                    <pre data-prefix=">">
                      <code className="text-green-400 whitespace-pre-wrap">
                        This file doesn't seem to contain any malicious code, or
                        it might not contain any python source at all.
                      </code>
                    </pre>
                  </>
                ) : (
                  <>
                    <pre data-prefix="$">
                      <code className="text-red-400 font-bold whitespace-pre-wrap">
                        logs analyser
                      </code>
                    </pre>
                    {files[fileIndex]?.file_analysis.map((item, i) => (
                      <pre data-prefix=">">
                        <code
                          className="text-red-400 whitespace-pre-wrap"
                          key={i}
                        >
                          {item.content}
                        </code>
                      </pre>
                    ))}
                  </>
                )}
              </div>
            </div>
          )}
          <div className="flex flex-grow" />
          {/* <div className="flex items-center justify-end w-full">
            <button className="btn btn-primary">Analyse</button>
          </div> */}
        </div>
      </div>
    </div>
  );
}

export default App;
