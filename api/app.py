from distutils.log import error
import os
import base64
from flask import Flask, flash, request, redirect, url_for, session, jsonify
from werkzeug.utils import secure_filename
from flask_cors import CORS, cross_origin
import logging
from scripts.extract_pyc import extract_pyc
from scripts.check_if_executable import check_if_executable
from scripts.suspicious_lines import find_suspicious_lines
from scripts.extract_and_analyse import extract_and_analyse
from scripts.clear_inputs import clear_inputs

logging.basicConfig(level=logging.INFO)

logger = logging.getLogger('')

UPLOAD_FOLDER = os.path.join(".", "inputs")

app = Flask(__name__)
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER
app.config["SECRET_KEY"] = "oh_so_secret"


@app.route('/upload', methods=['POST'])
def fileUpload():
    try:
        clear_inputs()
        if not os.path.isdir(UPLOAD_FOLDER):
            os.mkdir(UPLOAD_FOLDER)
        file = request.files['file']
        filename = secure_filename(file.filename)
        destination = "/".join([UPLOAD_FOLDER, filename])
        file.save(destination)
        session['uploadFilePath'] = destination
        logs = '{"logs": [{"stdout": "[+] Processing file... [+] Python extracted from file."}]}'

        extracted_files = []
        # First check if executable file
        if (check_if_executable(filename)):
            logs = extract_pyc(filename)
        extracted_files_names = extract_and_analyse()

        for extracted_filename in extracted_files_names:
            if extracted_filename.lower().endswith(".py"):
                file_path = os.path.join(
                    UPLOAD_FOLDER, extracted_filename)
                with open(file_path, 'rb') as f:
                    file_content = f.read()
                    file_content_base64 = base64.b64encode(
                        file_content).decode('utf-8')
                    file_analysis = find_suspicious_lines(file_content)
                    suspicious = False
                    if (len(file_analysis) > 0):
                        suspicious = True
                    extracted_files.append(
                        {"name": extracted_filename, "suspicious": suspicious, "file_content": file_content_base64, "file_analysis": file_analysis})
        # clear_inputs()
        return jsonify({"logs": logs, "extracted_files": extracted_files, "errorcode": 0})
    except Exception:
        return jsonify({"errorcode": 1})


if __name__ == "__main__":

    app.run(debug=True, host="0.0.0.0", use_reloader=False)

CORS(app, expose_headers='Authorization')
