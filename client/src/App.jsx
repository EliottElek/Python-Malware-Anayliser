import { useState, useCallback } from "react";
import { useDropzone } from "react-dropzone";
import CodeEditorWindow from "./components/Editor";
import toast from "react-hot-toast";
function App() {
  const [files, setFiles] = useState([]);
  const [fileIndex, setFileIndex] = useState(0);

  const handleFileDrop = useCallback(async (acceptedFiles) => {
    acceptedFiles.forEach(async (file) => {
      const reader = new FileReader();
      if (!file.name.endsWith(".pyc")) {
        toast.error(
          (t) => (
            <span>
              Could not import <b>{file.name}</b>.
              <br /> Try again with <b>.pyc</b> or <b>.exe</b> formats.
            </span>
          ),
          {
            duration: 4000,
            position: "top-center",
          }
        );
        return;
      }
      reader.onabort = () => console.log("file reading was aborted");
      reader.onerror = () => console.log("file reading has failed");

      reader.onload = () => {
        const data = new FormData();
        data.append("file", file);
        data.append("filename", file.name);
        fetch("http://localhost:5000/upload", {
          method: "POST",
          body: data,
        }).then((response) => {
          response.json().then((body) => {
            setFiles((prevFiles) => [
              ...prevFiles,
              {
                name: body.filename,
                suspicious: body.suspicious,
                content: atob(body.file_content),
                file_analysis: body.file_analysis,
                language: "python",
              },
            ]);
          });
        });
      };

      reader.readAsArrayBuffer(file);
    });
  }, []);

  const { getRootProps, getInputProps, isDragActive } = useDropzone({
    onDrop: handleFileDrop,
  });

  return (
    <div className="h-screen relative">
      <div className="flex h-12 join shadow w-full rounded-none z-20 sticky top-0 bg-inherit overflow-x-auto">
        {files?.map((file, i) => (
          <button
            className={[
              "join-item lowercase btn font-normal border-b-2 border-transparent hover:border-b-inherit rounded-none text-white",
              file.name === files[fileIndex].name &&
                "border-b-gray-600 border-b-2",
              file.suspicious ? "text-red-400" : "text-green-400",
            ].join(" ")}
            type="radio"
            name="options"
            aria-label={file.name}
            disabled={file === file.name}
            onClick={() => setFileIndex(i)}
            key={i}
          >
            {file.name}
          </button>
        ))}
      </div>
      <div className="md:grid-cols-2 md:grid flex flex-col flex-col-reverse">
        <div className="h-[calc(100vh_-_48px)] bg-[#191E25]">
          {files.length > 0 ? (
            <div className="h-full">
              <CodeEditorWindow file={files[fileIndex]} />
            </div>
          ) : (
            <div className="h-full flex flex-col items-center text-xl w-full flex items-center justify-center">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                fill="none"
                viewBox="0 0 24 24"
                strokeWidth={1.5}
                stroke="currentColor"
                className="w-8 h-8"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  d="M17.25 6.75L22.5 12l-5.25 5.25m-10.5 0L1.5 12l5.25-5.25m7.5-3l-4.5 16.5"
                />
              </svg>

              <h1>Your decompiled code will show here</h1>
            </div>
          )}
        </div>
        <div className="flex items-center flex-col h-[calc(100vh_-_48px)]  justify-start p-4 gap-4">
          <div
            className={[
              "w-full cursor-pointer text-center p-4 h-[200px] rounded-xl flex items-center justify-center border-dotted border-2 border-gray-400",
              ,
              isDragActive && "bg-gray-300 bg-opacity-30",
            ].join(" ")}
            {...getRootProps()}
          >
            <input {...getInputProps()} />
            {isDragActive ? (
              <div className="flex items-center flex-col">
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  fill="none"
                  viewBox="0 0 24 24"
                  strokeWidth={1.5}
                  stroke="currentColor"
                  className="w-12 h-12"
                >
                  {" "}
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    d="M12 16.5V9.75m0 0l3 3m-3-3l-3 3M6.75 19.5a4.5 4.5 0 01-1.41-8.775 5.25 5.25 0 0110.233-2.33 3 3 0 013.758 3.848A3.752 3.752 0 0118 19.5H6.75z"
                  />
                </svg>
                <p>LÃ¢chez...</p>
              </div>
            ) : (
              <div className="flex items-center flex-col">
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  fill="none"
                  viewBox="0 0 24 24"
                  strokeWidth={1.5}
                  stroke="currentColor"
                  className="w-12 h-12"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    d="M12 16.5V9.75m0 0l3 3m-3-3l-3 3M6.75 19.5a4.5 4.5 0 01-1.41-8.775 5.25 5.25 0 0110.233-2.33 3 3 0 013.758 3.848A3.752 3.752 0 0118 19.5H6.75z"
                  />
                </svg>

                <p>
                  Drag & Drop your <b>.pyc</b> or <b>.exe</b> file(s) here or
                  click to open the finder.
                </p>
              </div>
            )}
          </div>
          {files?.length > 0 && (
            <div className="p-3 w-full">
              <h2 className="text-2xl">
                Analysis of{" "}
                <span className="font-bold">{files[fileIndex].name}</span>
              </h2>
              <div className="p-1 py-3">
                {files[fileIndex]?.file_analysis?.length === 0 ? (
                  <span className="text-green-400">
                    This file doesn't seem to contain any malicious code.
                  </span>
                ) : (
                  <ul className="text-red-400 h-full overflow-y-auto">
                    {files[fileIndex]?.file_analysis.map((item) => (
                      <li>{item.content}</li>
                    ))}
                  </ul>
                )}
              </div>
            </div>
          )}
          <div className="flex flex-grow" />
          {/* <div className="flex items-center justify-end w-full">
            <button className="btn btn-primary">Analyse</button>
          </div> */}
        </div>
      </div>
    </div>
  );
}

export default App;
