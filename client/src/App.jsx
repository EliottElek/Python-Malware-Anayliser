import { useState, useCallback, useEffect } from "react";
import { useDropzone } from "react-dropzone";
import CodeEditorWindow from "./components/Editor";
import toast from "react-hot-toast";
import { themeChange } from "theme-change";
import { themes } from "./utils";
import Logo from "./images/logo.png";
import { useLocalStorage } from "./hooks/useLocalStorage";

function App() {
  const [files, setFiles] = useLocalStorage("FILES", []);
  const [openWelcomeModal, setOpenWelcomeModal] = useLocalStorage(
    "WELCOME",
    true
  );
  const [openDeleteModal, setOpenDeleteModal] = useState(false);
  const [display, setDisplay] = useLocalStorage("DISPLAY", "logs");

  const [dontAskAgain, setDontAskAgain] = useLocalStorage(
    "DONT_ASK_AGAIN",
    false
  );
  const [fileIndex, setFileIndex] = useLocalStorage("FILE_INDEX", 0);
  const [fileToDeleteIndex, setFileToDeleteIndex] = useState(-1);
  const handleRemove = (index) => {
    setFiles((prevFiles) => {
      const updatedFiles = [...prevFiles];
      updatedFiles.splice(index, 1);
      return updatedFiles;
    });
    // const foundIndex = index - 1 < 0 ? index + 1 : index - 1;
    setFileIndex(0);
    setFileToDeleteIndex(-1);
  };
  useEffect(() => {
    themeChange(false);
  }, []);
  const handleCloseWelcomeModal = () => {
    setOpenWelcomeModal(false);
  };
  const handleTabDeleteClick = (index) => {
    if (!dontAskAgain) {
      setFileToDeleteIndex(index);
      setOpenDeleteModal(true);
    } else handleRemove(index);
  };
  const handleFileDrop = useCallback(async (acceptedFiles) => {
    acceptedFiles.forEach(async (file) => {
      const reader = new FileReader();
      reader.onabort = () => console.log("file reading was aborted");
      reader.onerror = () => console.log("file reading has failed");
      reader.onload = () => {
        const data = new FormData();
        data.append("file", file);
        data.append("filename", file.name);
        fetch("http://localhost:5000/upload", {
          method: "POST",
          body: data,
        }).then((response) => {
          response.json().then((body) => {
            if (body.errorcode === 1)
              return toast.error(
                () => (
                  <span>
                    The import failed.
                    <br /> Try again with <b>.pyc</b> or <b>.exe</b> formats.
                    <br /> Try only one file at the time.
                  </span>
                ),
                {
                  duration: 4000,
                  position: "top-center",
                }
              );
            const logs = body.logs ? JSON.parse(body?.logs) : null;
            const extracted_files = body.extracted_files.map((file) => {
              return {
                logs: logs.logs[0],
                name: file.name,
                suspicious: file.suspicious,
                content: atob(file.file_content),
                file_analysis: file.file_analysis,
                language: "python",
                extracted_files: body.extracted_files,
              };
            });
            setFiles(extracted_files);
          });
        });
      };

      reader.readAsArrayBuffer(file);
    });
  }, []);

  const { getRootProps, getInputProps, isDragActive } = useDropzone({
    onDrop: handleFileDrop,
    onDropRejected: () =>
      toast.error(
        () => (
          <span>
            The import failed.
            <br /> Try again with <b>.pyc</b> or <b>.exe</b> formats.
            <br /> Try only one file at the time.
          </span>
        ),
        {
          duration: 4000,
          position: "top-center",
        }
      ),

    maxFiles: 1,
  });

  return (
    <div className="h-screen relative">
      <div className="flex justify-between items-center h-16 p-2 px-8 shadow bg-base-100 rounded-none w-full sticky top-0 overflow-x-auto border-b border-b-base-200">
        <a className="h-full" href="/">
          <img src={Logo} className="h-full" />
        </a>
        <div className="flex flex-grow items-center gap-3 h-full">
          <div className="w-full text-end">
            <select
              onChange={() => window.location.reload()}
              data-choose-theme
              className="select select-bordered rounded-full select-sm"
            >
              {themes.map(({ theme }, i) => (
                <option key={i} value={theme}>
                  {theme}
                </option>
              ))}
            </select>
          </div>

          <a
            target="_blank"
            href="https://github.com/EliottElek/Python-Malware-Anayliser"
          >
            <button className="btn rounded-full flex items-center gap-2 btn-primary btn-sm">
              <span>Github</span>
            </button>
          </a>
        </div>
      </div>
      <div className="flex h-12 tabs join shadow bg-base-100 rounded-none w-full sticky top-16 flex-nowrap scrollbar-hide	overflow-x-auto">
        {files?.map((file, i) => (
          <a
            className={[
              "tab tab-lifted gap-2 flex items-center flex-nowrap justify-between h-full tab-lg",
              file.name === files[fileIndex]?.name && "bg-base-200",
              file.suspicious ? "text-red-400" : "text-green-400",
            ].join(" ")}
            type="radio"
            name="options"
            aria-label={file.name}
            disabled={file === file.name}
            onClick={() => setFileIndex(i)}
            key={i}
          >
            {file.name}
            <button
              className="btn btn-circle rounded-full bg-transparent btn-sm"
              onClick={(e) => {
                e.stopPropagation();
                handleTabDeleteClick(i);
              }}
            >
              <svg
                xmlns="http://www.w3.org/2000/svg"
                className="h-4 w-4"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth="2"
                  d="M6 18L18 6M6 6l12 12"
                />
              </svg>
            </button>
          </a>
        ))}
      </div>
      <div className="grid-cols-2 grid">
        <div className="h-[calc(100vh_-_112px)] border-r border-r-base-200 sticky top-28 bg-base-200">
          {files.length > 0 ? (
            <div className="h-full">
              <CodeEditorWindow
                dontAskAgain={dontAskAgain}
                setDontAskAgain={setDontAskAgain}
                file={files[fileIndex]}
              />
            </div>
          ) : (
            <div className="h-full flex flex-col items-center text-xl w-full flex items-center justify-center">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                fill="none"
                viewBox="0 0 24 24"
                strokeWidth={1.5}
                stroke="currentColor"
                className="w-8 h-8"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  d="M17.25 6.75L22.5 12l-5.25 5.25m-10.5 0L1.5 12l5.25-5.25m7.5-3l-4.5 16.5"
                />
              </svg>

              <h1>Your decompiled code will show here</h1>
            </div>
          )}
        </div>
        <div className="flex items-center flex-col h-[calc(100vh_-112px)] justify-start p-4 gap-4">
          <div
            className={[
              "w-full cursor-pointer text-center p-20 rounded-xl flex items-center justify-center border-dotted border-2 border-gray-400",
              ,
              isDragActive && "bg-gray-300 bg-opacity-30",
            ].join(" ")}
            {...getRootProps()}
          >
            <input {...getInputProps()} />
            {isDragActive ? (
              <div className="flex items-center flex-col">
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  fill="none"
                  viewBox="0 0 24 24"
                  strokeWidth={1.5}
                  stroke="currentColor"
                  className="w-12 h-12"
                >
                  {" "}
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    d="M12 16.5V9.75m0 0l3 3m-3-3l-3 3M6.75 19.5a4.5 4.5 0 01-1.41-8.775 5.25 5.25 0 0110.233-2.33 3 3 0 013.758 3.848A3.752 3.752 0 0118 19.5H6.75z"
                  />
                </svg>
                <p>Drop...</p>
              </div>
            ) : (
              <div className="flex items-center flex-col">
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  fill="none"
                  viewBox="0 0 24 24"
                  strokeWidth={1.5}
                  stroke="currentColor"
                  className="w-12 h-12"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    d="M12 16.5V9.75m0 0l3 3m-3-3l-3 3M6.75 19.5a4.5 4.5 0 01-1.41-8.775 5.25 5.25 0 0110.233-2.33 3 3 0 013.758 3.848A3.752 3.752 0 0118 19.5H6.75z"
                  />
                </svg>

                <p>
                  Drag & Drop your <b>.pyc</b> or <b>.exe</b> file(s) here or
                  click to open the finder.
                </p>
              </div>
            )}
          </div>
          <div className="tabs w-full max-w-sm join tabs-boxed">
            <a
              onClick={() => setDisplay("logs")}
              className={`tab flex-grow ${display === "logs" && "tab-active"}`}
            >
              Logs
            </a>
            <a
              onClick={() => setDisplay("analysis")}
              className={`tab flex-grow ${
                display === "analysis" && "tab-active"
              }`}
            >
              Analysis ({files[fileIndex]?.file_analysis?.length})
            </a>
          </div>
          {display === "analysis" && files?.length > 0 && (
            <div className="w-full">
              <div className="mockup-code p-3 f-full overflow-hidden flex flex-col">
                {files[fileIndex]?.file_analysis?.length === 0 ? (
                  <>
                    <pre data-prefix="$">
                      <code className="text-green-400 uppercase font-bold whitespace-pre-wrap">
                        analysis
                      </code>
                    </pre>
                    <pre data-prefix=">">
                      <code className="text-green-400 whitespace-pre-wrap">
                        This file doesn't seem to contain any malicious code, or
                        it might not contain any python source at all.
                      </code>
                    </pre>
                  </>
                ) : (
                  <>
                    <pre data-prefix="$">
                      <code className="text-red-400 uppercase font-bold whitespace-pre-wrap">
                        analysis
                      </code>
                    </pre>
                    {files[fileIndex]?.file_analysis?.map((item, i) => (
                      <pre data-prefix=">" key={i}>
                        <code className="bg-error text-error-content whitespace-pre-wrap">
                          {item.content}
                        </code>
                      </pre>
                    ))}
                  </>
                )}
              </div>
            </div>
          )}

          {display === "logs" && files?.length > 0 && files[fileIndex].logs && (
            <div className="w-full">
              <div className="mockup-code p-3 f-full overflow-hidden flex flex-col">
                <pre data-prefix="$">
                  <code className="uppercase font-bold whitespace-pre-wrap">
                    logs
                  </code>
                </pre>
                <pre data-prefix="$">
                  <code className={"font-normal whitespace-pre-wrap"}>
                    {files[fileIndex]?.logs["stdout"]}
                  </code>
                </pre>
              </div>
            </div>
          )}
          <div className="flex flex-grow" />
          {/* <div className="flex items-center justify-end w-full">
            <button className="btn btn-primary">Analyse</button>
          </div> */}
        </div>
      </div>
      <dialog
        id="my_modal_4"
        className={`modal ${openWelcomeModal && "modal-open"}`}
      >
        <form method="dialog" className="modal-box w-11/12 max-w-3xl">
          <h3 className="font-bold text-lg">
            Welcome to the Python Code Analyzer !
          </h3>
          <p className="py-2 pt-4">
            This application allows you to analyze .pyc or .exe files, extract
            their Python content, and perform checks for suspicious code. With
            the Python Code Analyzer, you can gain insights into the inner
            workings of compiled Python files and identify any potentially
            malicious or suspicious code. Simply upload your .pyc or .exe files,
            and the analyzer will extract the underlying Python code for
            analysis.
          </p>
          <br />
          <p className="py-2">
            {" "}
            The application will then scan the code for any indicators of
            suspicious behavior, helping you ensure the security and integrity
            of your Python applications.{" "}
          </p>
          <br />
          <p className="py-2">
            Get started now and leverage the power of the Python Code Analyzer
            to safeguard your Python projects.
          </p>
          <div className="modal-action">
            {/* if there is a button, it will close the modal */}
            <button
              className="btn btn-primary"
              onClick={handleCloseWelcomeModal}
            >
              Got it !
            </button>
          </div>
        </form>
      </dialog>
      <dialog
        id="my_modal_4"
        className={`modal ${openDeleteModal && "modal-open"}`}
      >
        <form method="dialog" className="modal-box w-11/12 max-w-xl">
          {fileToDeleteIndex != -1 && (
            <h3 className="font-bold text-lg">
              Delete {files[fileToDeleteIndex]?.name} ?
            </h3>
          )}
          <p className="py-2 pt-4">
            All decompiled code and logs will be lost for this file.
          </p>
          <br />
          <p className="py-2 font-bold">Are you sure you want to continue ?</p>
          <br />
          <div className="flex items-center gap-2">
            <input
              type="checkbox"
              checked={dontAskAgain}
              onChange={(e) => setDontAskAgain(e.target.checked)}
              className="checkbox checkbox-primary"
            />

            <span>Don't ask me again</span>
          </div>
          <div className="flex gap-3 justify-end">
            <button
              className="btn btn-default"
              onClick={() => setOpenDeleteModal(false)}
            >
              Cancel
            </button>
            {/* if there is a button, it will close the modal */}
            <button
              className="btn btn-primary"
              onClick={() => {
                handleRemove(fileToDeleteIndex);
                setOpenDeleteModal(false);
              }}
            >
              Delete anyways
            </button>
          </div>
        </form>
      </dialog>
    </div>
  );
}

export default App;
