import os
import subprocess


def generate_report():
    # Directory where the malicious PE files are located
    files_directory = os.path.join(".", "inputs")

    # Create the output directory if it doesn't exist
    os.makedirs(files_directory, exist_ok=True)

    # Iterate over the files in the input directory
    for filename in os.listdir(files_directory):
        # Check if the file is a PE file
        if filename.lower().endswith(".pyc") or filename.lower().endswith(".dll") or filename.lower().endswith(".exe"):

            extracted_bytecode_file = filename
            extracted_bytecode_path = os.path.join(
                files_directory, extracted_bytecode_file)

            # Check if the bytecode file was extracted successfully
            if os.path.exists(extracted_bytecode_path):
                # Perform decompilation using the decompilation tools

                # Decompilation using python-uncompyle6
                res = subprocess.run(["./pycdc/pycdc", extracted_bytecode_path],
                                     stdout=subprocess.PIPE, stderr=subprocess.PIPE)

                # Write the decompiled content to a file
                decompiled_content = res.stdout.decode(
                    "utf-8")  # Decode the stdout bytes to string
                decompiled_filename = os.path.splitext(
                    filename)[0] + ".py"  # Change the extension to .py
                decompiled_file_path = os.path.join(
                    files_directory, decompiled_filename)
                with open(decompiled_file_path, "w") as f:
                    f.write(decompiled_content)

                # Move the decompiled code to the output directory
                for decompiled_filename in os.listdir(files_directory):
                    if decompiled_filename.endswith(".pyc"):
                        decompiled_file_path = os.path.join(
                            files_directory, decompiled_filename)
                        os.rename(decompiled_file_path, os.path.join(
                            files_directory, decompiled_filename))

        # Remove the extracted bytecode file
        # os.remove(extracted_bytecode_path)


generate_report()
