import datetime
import logging
import os
import json
import shutil
import subprocess
from scripts.copy_pyc_files import copy_pyc_files

files_directory = os.path.join(".", "inputs")
logs_directory = os.path.join(".", "logs")

os.makedirs(files_directory, exist_ok=True)
os.makedirs(logs_directory, exist_ok=True)
# Configure logging
logging.basicConfig(level=logging.INFO)

# Initialize an empty list to store the logs
logs = []


def convert_to_serializable(obj):
    if isinstance(obj, bytes):
        return obj.decode("utf-8")
    raise TypeError("Object of type %s is not JSON serializable" %
                    type(obj).__name__)


def extract_pyc(filename):
    # Construct the output directory path
    extracted_bytecode_directory = files_directory
    os.makedirs(extracted_bytecode_directory, exist_ok=True)

    # Run pyinstxtractor to extract pyc files
    logs.append(subprocess.run(
        ["python3", "./pyinstxtractor/pyinstxtractor.py", os.path.join(files_directory, filename), "-o",
         files_directory],
        stdout=subprocess.PIPE, stderr=subprocess.PIPE).__dict__)

    app_extracted_director = os.path.join(".", filename + "_extracted")

    # Move the extracted .pyc files to the input folder
    copy_pyc_files(app_extracted_director, files_directory)
    shutil.rmtree(app_extracted_director)

    # Perform decompilation for the extracted .pyc files
    for extracted_filename in os.listdir(files_directory):
        if extracted_filename.lower().endswith(".pyc"):
            extracted_file_path = os.path.join(
                files_directory, extracted_filename)

            # Decompilation using python-uncompyle6
            res = subprocess.run(["./pycdc/pycdc", extracted_file_path],
                                 stdout=subprocess.PIPE, stderr=subprocess.PIPE)

            # Write the decompiled content to a file
            decompiled_content = res.stdout.decode("utf-8")
            decompiled_filename = os.path.splitext(
                extracted_filename)[0] + ".py"
            decompiled_file_path = os.path.join(
                files_directory, decompiled_filename)
            with open(decompiled_file_path, "w") as f:
                f.write(decompiled_content)
        current_time = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        logs_file_path = os.path.join(
            logs_directory, f"logs_{current_time}.json")
        with open(logs_file_path, "w") as f:
            json.dump({"logs": logs}, f, default=convert_to_serializable)
        with open(logs_file_path, "r") as f:
            return f.read()
